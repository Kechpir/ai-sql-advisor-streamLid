# -*- coding: utf-8 -*-
import json
import time
import requests
import streamlit as st

st.set_page_config(page_title="AI SQL Advisor", page_icon="üß†", layout="centered")

# === Secrets / Config ===
SUPABASE_URL = st.secrets.get("SUPABASE_URL", "https://zpppzzwaoplfeoiynkam.supabase.co")
SUPABASE_ANON_KEY = st.secrets.get("SUPABASE_ANON_KEY", "")
FUNC_BASE = f"{SUPABASE_URL}/functions/v1"

OPENAI_IN_PRICE = float(st.secrets.get("OPENAI_IN_PRICE", 0))
OPENAI_OUT_PRICE = float(st.secrets.get("OPENAI_OUT_PRICE", 0))

HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {SUPABASE_ANON_KEY}" if SUPABASE_ANON_KEY else "",
}

# ‚Äî –†–∞–±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π /schemas (CRUD —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ö–µ–º)
SCHEMAS_FUNC = f"{SUPABASE_URL}/functions/v1/schemas"

def _schemas_get():
    return requests.get(SCHEMAS_FUNC, headers=HEADERS, timeout=40)

def _schemas_post(payload: dict):
    return requests.post(SCHEMAS_FUNC, headers=HEADERS, data=json.dumps(payload), timeout=60)


# === helpers ===
def _err_box(msg, details=None):
    st.error(msg)
    if details:
        with st.expander("–ü–æ–¥—Ä–æ–±–Ω–µ–µ"):
            st.code(details, language="text")

def _post_json(path: str, payload: dict, timeout=40):
    url = f"{FUNC_BASE}/{path.lstrip('/')}"
    return requests.post(url, headers=HEADERS, data=json.dumps(payload), timeout=timeout)

def _get(path: str, timeout=40):
    url = f"{FUNC_BASE}/{path.lstrip('/')}"
    return requests.get(url, headers=HEADERS, timeout=timeout)

def _validate_url(db_url: str):
    if not db_url:
        return "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."
    if not db_url.startswith(("postgresql://", "postgres://")):
        return "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Postgres."
    if "@" not in db_url or ":" not in db_url:
        return "–ù–µ—Ç –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è –∏–ª–∏ —Ö–æ—Å—Ç–∞."
    if "sslmode=" not in db_url:
        return "–î–æ–±–∞–≤—å—Ç–µ ?sslmode=require."
    return None

def _badge(text: str):
    st.markdown(
        f"<span style='background:#10b98120;color:#065f46;padding:4px 10px;border-radius:999px;font-size:12px;border:1px solid #10b98150;'>{text}</span>",
        unsafe_allow_html=True,
    )

def copy_to_clipboard(label, text_to_copy, key):
    st.components.v1.html(f"""
        <button id="{key}" style="padding:6px 10px;border-radius:8px;border:1px solid #e5e7eb;cursor:pointer;">
            {label}
        </button>
        <script>
            const b=document.getElementById("{key}");
            b&&b.addEventListener("click",async()=>{{
                try{{await navigator.clipboard.writeText({json.dumps(text_to_copy)});b.innerText="–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ‚úì";
                setTimeout(()=>b.innerText={json.dumps(label)},1500);}}
                catch(e){{b.innerText="–û—à–∏–±–∫–∞";setTimeout(()=>b.innerText={json.dumps(label)},1500);}}
            }});
        </script>
    """, height=45)

def _annotate_sql(sql: str):
    notes = []
    up = sql.upper()
    if "SELECT" in up: notes.append("-- SELECT: –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤—ã–≤–æ–¥–∏–º")
    if "FROM" in up: notes.append("-- FROM: –∏–∑ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –±–µ—Ä—ë–º")
    if "JOIN" in up: notes.append("-- JOIN: —Å–æ–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã")
    if "WHERE" in up: notes.append("-- WHERE: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫")
    if "GROUP BY" in up: notes.append("-- GROUP BY: –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞")
    if "ORDER BY" in up: notes.append("-- ORDER BY: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
    if "COALESCE(" in up: notes.append("-- COALESCE: –∑–∞–º–µ–Ω–∞ NULL –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ")
    if "COUNT(" in up: notes.append("-- COUNT: COUNT(*) —Å—á–∏—Ç–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏")
    header = "/* –ü–æ—è—Å–Ω–µ–Ω–∏—è:\n" + "\n".join(notes) + "\n*/\n" if notes else ""
    return header + sql


st.title("üß† AI SQL Advisor")
st.caption("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ SQL –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞. –¢–æ–ª—å–∫–æ SELECT, –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

if not SUPABASE_ANON_KEY:
    st.warning("‚ö†Ô∏è –ù–µ—Ç SUPABASE_ANON_KEY –≤ Secrets.")

tab_scan, tab_saved = st.tabs(["üîé –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å/–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", "üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –±–∞–∑—ã"])

# ========== TAB 1: Scan/Generate ==========
with tab_scan:
    with st.form("conn_form", clear_on_submit=False):
        db_url = st.text_input("–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", placeholder="postgresql://user:pass@host/db?sslmode=require")
        schema_name = st.text_input("–°—Ö–µ–º–∞", value="public")
        submitted = st.form_submit_button("üîé –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ö–µ–º—É")

        if submitted:
            err = _validate_url(db_url)
            if err:
                _err_box("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL", err)
            else:
                with st.spinner("–ß–∏—Ç–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î..."):
                    try:
                        r = _post_json("fetch_schema", {"db_url": db_url, "schema": schema_name})
                        data = r.json()
                        if r.status_code >= 400:
                            _err_box("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ö–µ–º—ã", json.dumps(data, ensure_ascii=False, indent=2))
                        else:
                            st.session_state["schema_json"] = data
                            st.session_state["schema_warning"] = data.get("warning")
                            st.success("–°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
                    except Exception as e:
                        _err_box("–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ /fetch_schema", str(e))

    w = st.session_state.get("schema_warning")
    if isinstance(w, dict) and w.get("code") == "ROLE_NOT_CATALOG_ONLY":
        st.warning("‚ö†Ô∏è –ö–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω—ã–π —Ä–µ–∂–∏–º: —Ä–æ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º. –†–∞–±–æ—Ç–∞–µ–º –≤ read-only —Ä–µ–∂–∏–º–µ.")

    schema_json = st.session_state.get("schema_json")
    if schema_json:
        count = schema_json.get("countTables") or len(schema_json.get("tables", {}))
        _badge(f"–°—Ö–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ‚Ä¢ —Ç–∞–±–ª–∏—Ü: {count}")
        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å JSON-—Å—Ö–µ–º—É"):
            st.code(json.dumps(schema_json, ensure_ascii=False, indent=2), language="json")

        with st.form("save_schema_form"):
            save_name = st.text_input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥ –∏–º–µ–Ω–µ–º", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: neon_demo")
            if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                if not save_name.strip():
                    _err_box("–ò–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ")
                else:
                    r = _schemas_post({"op": "save", "name": save_name.strip(), "schema": schema_json})
                    if r.status_code >= 400:
                        _err_box("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", r.text)
                    else:
                        st.success(f"–°—Ö–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {save_name.strip()}")

    st.markdown("---")
    nl = st.text_area("–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–∫–∞–∂–∏ –∏–º–µ–Ω–∞ –∏ email –∫–ª–∏–µ–Ω—Ç–æ–≤...'")
    col1, col2 = st.columns(2)
    with col1:
        gen = st.button("ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL", use_container_width=True)
    with col2:
        clear = st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True)
    if clear:
        st.session_state.pop("generated_sql", None)
        st.session_state.pop("usage", None)
        st.toast("–û—á–∏—â–µ–Ω–æ.", icon="‚úÖ")

    if gen:
        if not schema_json:
            _err_box("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ö–µ–º—É.")
        elif not nl.strip():
            _err_box("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.")
        else:
            payload = {"nl": nl.strip(), "schema": schema_json, "dialect": "postgres"}
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL..."):
                r = _post_json("generate_sql", payload)
                data = r.json()
                if data.get("blocked"):
                    st.warning("üö´ –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–∏—Ç–∏–∫–æ–π.")
                    st.caption(data.get("reason", ""))
                else:
                    st.session_state["generated_sql"] = data.get("sql")
                st.session_state["usage"] = data.get("usage")

    sql_text = st.session_state.get("generated_sql")
    usage = st.session_state.get("usage") or {}
    explain = st.checkbox("–ü–æ—è—Å–Ω–∏—Ç—å SQL", value=False)
    if sql_text:
        final_sql = _annotate_sql(sql_text) if explain else sql_text
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")
        st.code(final_sql, language="sql")
        copy_to_clipboard("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å SQL", final_sql, f"copy-{int(time.time())}")

# === ODOMETER ===
usage = st.session_state.get("usage") or {}
reset_odometer = st.button("üßÆ –û–±–Ω—É–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤", use_container_width=True)
if reset_odometer:
    st.components.v1.html("<script>localStorage.removeItem('ai_sql_total_usd');localStorage.removeItem('ai_sql_total_tokens');</script>", height=0)
    st.toast("–°—á—ë—Ç—á–∏–∫ –æ–±–Ω—É–ª—ë–Ω.", icon="‚úÖ")

if (usage.get("prompt_tokens") or usage.get("completion_tokens")):
    pt = int(usage.get("prompt_tokens") or 0)
    ct = int(usage.get("completion_tokens") or 0)
    total_now = pt + ct
    cost_now = (pt / 1000.0) * OPENAI_IN_PRICE + (ct / 1000.0) * OPENAI_OUT_PRICE

    st.info(f"–¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å ‚Üí {total_now} —Ç–æ–∫–µ–Ω–æ–≤ ‚Ä¢ ${cost_now:.2f}")

    st.components.v1.html(f"""
        <script>
        let u = parseFloat(localStorage.getItem('ai_sql_total_usd') || '0');
        let t = parseInt(localStorage.getItem('ai_sql_total_tokens') || '0');
        u += {cost_now:.6f}; t += {total_now};
        localStorage.setItem('ai_sql_total_usd', u.toFixed(6));
        localStorage.setItem('ai_sql_total_tokens', t);
        </script>
    """, height=0)

# --- UI –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ ---
st.components.v1.html("""
<div style="
    margin-top: 10px;
    padding: 10px 20px;
    border: 1px solid #4B8BFF;
    border-radius: 12px;
    background-color: #1E1E1E;
    box-shadow: 0 0 12px rgba(75, 139, 255, 0.35);
    color: #E0E6FF;
    font-family: 'Inter', sans-serif;
    font-size: 16px;
    text-align: left;
">
  <b style="color:#A0BFFF;">–í—Å–µ–≥–æ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b><br>
  <span id="odo_line" style="color:#8AB4FF;">—á–∏—Ç–∞–µ–º‚Ä¶</span>
</div>

<script>
const usd = parseFloat(localStorage.getItem('ai_sql_total_usd') || '0');
const tok = parseInt(localStorage.getItem('ai_sql_total_tokens') || '0');
document.getElementById('odo_line').innerHTML = `${tok.toLocaleString('ru-RU')} —Ç–æ–∫–µ–Ω–æ–≤ ‚Ä¢ <span style="color:#6BFFA6;">$${usd.toFixed(2)}</span>`;
</script>
""", height=70)
# === /ODOMETER ===



# ========== TAB 2: Saved Schemas ==========
with tab_saved:
    st.caption("üíæ –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ö–µ–º (Storage bucket: schemas).")
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", use_container_width=True):
        st.session_state.pop("schemas_list", None)

    if "schemas_list" not in st.session_state:
        rr = _schemas_get()
        if rr.status_code < 400:
            st.session_state["schemas_list"] = rr.json().get("items", [])
        else:
            _err_box("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫", rr.text)

    items = st.session_state.get("schemas_list", []) or []
    names = ["‚Äî"] + [x.get("name") for x in items]
    selected = st.selectbox("–í—ã–±–µ—Ä–∏ —Å—Ö–µ–º—É", options=names, index=0)

    if "schema_json" not in st.session_state:
        st.info("‚ÑπÔ∏è –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Diff/–û–±–Ω–æ–≤–∏—Ç—å, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ö–µ–º—É –≤–æ –≤–∫–ª–∞–¥–∫–µ ¬´–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å¬ª.")
    elif selected and selected != "‚Äî":
        col1, col2, col3 = st.columns(3)
        do_diff = col1.button("‚öôÔ∏è Diff —Å —Ç–µ–∫—É—â–µ–π", use_container_width=True)
        do_update = col2.button("‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True)
        do_delete = col3.button("üóë –£–¥–∞–ª–∏—Ç—å", use_container_width=True)

        if do_diff:
            r = _schemas_post({"op": "diff", "name": selected, "new_schema": st.session_state["schema_json"]})
            data = r.json()
            if r.status_code >= 400:
                _err_box("–û—à–∏–±–∫–∞ diff", json.dumps(data, ensure_ascii=False, indent=2))
            else:
                st.code(json.dumps(data.get("diff"), ensure_ascii=False, indent=2), language="json")

        if do_update:
            r = _schemas_post({"op": "update", "name": selected, "new_schema": st.session_state["schema_json"]})
            data = r.json()
            if r.status_code >= 400:
                _err_box("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", json.dumps(data, ensure_ascii=False, indent=2))
            else:
                st.success(data.get("reason", "–û–±–Ω–æ–≤–ª–µ–Ω–æ."))

        if do_delete:
            r = _schemas_post({"op": "delete", "name": selected})
            if r.status_code < 400:
                st.success(f"–£–¥–∞–ª–µ–Ω–æ: {selected}")
                st.session_state.pop("schemas_list", None)
            else:
                _err_box("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", r.text)
