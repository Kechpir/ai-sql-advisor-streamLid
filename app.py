# -*- coding: utf-8 -*-
import json
import time
import requests
import streamlit as st

st.set_page_config(page_title="AI SQL Advisor", page_icon="üß†", layout="centered")

# === Secrets / Config ===
SUPABASE_URL = st.secrets.get("SUPABASE_URL", "https://zpppzzwaoplfeoiynkam.supabase.co")
SUPABASE_ANON_KEY = st.secrets.get("SUPABASE_ANON_KEY", "")
FUNC_BASE = f"{SUPABASE_URL}/functions/v1"

# —Ü–µ–Ω—ã OpenAI –∑–∞ 1–ö —Ç–æ–∫–µ–Ω–æ–≤ (–≤ $)
OPENAI_IN_PRICE = float(st.secrets.get("OPENAI_IN_PRICE", 0))       # –Ω–∞–ø—Ä.: 0.002
OPENAI_OUT_PRICE = float(st.secrets.get("OPENAI_OUT_PRICE", 0))     # –Ω–∞–ø—Ä.: 0.006

HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {SUPABASE_ANON_KEY}" if SUPABASE_ANON_KEY else "",
}

# ‚Äî –†–∞–±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π /schemas (CRUD —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ö–µ–º)
SCHEMAS_FUNC = f"{SUPABASE_URL}/functions/v1/schemas"

def _schemas_get():
    return requests.get(SCHEMAS_FUNC, headers=HEADERS, timeout=40)

def _schemas_post(payload: dict):
    return requests.post(SCHEMAS_FUNC, headers=HEADERS, data=json.dumps(payload), timeout=60)


# ==============================
# Helpers
# ==============================
def _err_box(msg: str, details: str | None = None):
    st.error(msg)
    if details:
        with st.expander("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ"):
            st.code(details, language="text")

def _post_json(path: str, payload: dict, timeout=40) -> requests.Response:
    url = f"{FUNC_BASE}/{path.lstrip('/')}"
    return requests.post(url, headers=HEADERS, data=json.dumps(payload), timeout=timeout)

def _get(path: str, timeout=40) -> requests.Response:
    url = f"{FUNC_BASE}/{path.lstrip('/')}"
    return requests.get(url, headers=HEADERS, timeout=timeout)

def _validate_url(db_url: str) -> str | None:
    if not db_url:
        return "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (db_url)."
    if not db_url.startswith(("postgresql://", "postgres://")):
        return "–°–µ–π—á–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Postgres. URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å postgresql:// –∏–ª–∏ postgres://"
    if "@" not in db_url or ":" not in db_url:
        return "–ü–æ—Ö–æ–∂–µ, –≤ URL –Ω–µ—Ç –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è –∏–ª–∏ —Ö–æ—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç."
    if "sslmode=" not in db_url:
        return "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å ?sslmode=require –∫ —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
    return None

def _badge(text: str):
    st.markdown(
        f"<span style='background:#10b98120;color:#065f46;padding:4px 10px;border-radius:999px;font-size:12px;border:1px solid #10b98150;'>{text}</span>",
        unsafe_allow_html=True,
    )

def copy_to_clipboard(label: str, text_to_copy: str, key: str):
    st.components.v1.html(f"""
        <div><button id="{key}" style="padding:6px 10px;border-radius:8px;border:1px solid #e5e7eb;cursor:pointer;">
            {label}
        </button></div>
        <script>
            const btn = document.getElementById("{key}");
            if (btn) {{
                btn.addEventListener("click", async () => {{
                    try {{
                        await navigator.clipboard.writeText({json.dumps(text_to_copy)});
                        btn.innerText = "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ‚úì";
                        setTimeout(() => btn.innerText = {json.dumps(label)}, 1500);
                    }} catch (e) {{
                        btn.innerText = "–ù–µ –≤—ã—à–ª–æ :(";
                        setTimeout(() => btn.innerText = {json.dumps(label)}, 1500);
                    }}
                }});
            }}
        </script>
    """, height=50)

def _annotate_sql(sql: str) -> str:
    notes = []
    up = sql.upper()
    if "SELECT" in up:   notes.append("-- SELECT: –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤—ã–≤–æ–¥–∏–º")
    if "FROM" in up:     notes.append("-- FROM: –∏–∑ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ")
    if "JOIN" in up:     notes.append("-- JOIN: –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã (LEFT JOIN ‚Äî –±–µ—Ä—ë–º –≤—Å–µ—Ö —Å–ª–µ–≤–∞)")
    if "WHERE" in up:    notes.append("-- WHERE: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –ø–æ —É—Å–ª–æ–≤–∏—é")
    if "GROUP BY" in up: notes.append("-- GROUP BY: –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏")
    if "HAVING" in up:   notes.append("-- HAVING: —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞–≥—Ä–µ–≥–∞—Ç–∞–º –ø–æ—Å–ª–µ GROUP BY")
    if "ORDER BY" in up: notes.append("-- ORDER BY: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    if "COALESCE(" in up:notes.append("-- COALESCE: –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ NULL")
    if "EXTRACT(" in up: notes.append("-- EXTRACT: –¥–æ—Å—Ç–∞—ë—Ç —á–∞—Å—Ç—å –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ (YEAR, MONTH –∏ —Ç.–¥.)")
    if "COUNT(" in up:   notes.append("-- COUNT: COUNT(*) —Å—á–∏—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏; COUNT(col) –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç NULL")
    header = "/* –ö—Ä–∞—Ç–∫–∏–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è –∫ –∑–∞–ø—Ä–æ—Å—É:\n" + "\n".join(notes) + "\n*/\n" if notes else ""
    return header + sql

# ==============================
# Pseudo-Auth (UI only)
# ==============================
with st.sidebar:
    st.subheader("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–¥–µ–º–æ)")
    if "user" not in st.session_state:
        st.session_state["user"] = None

    if st.button("–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google (–¥–µ–º–æ)"):
        st.session_state["user"] = {"provider": "google", "email": "demo@user.dev"}
        st.success("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω (–¥–µ–º–æ).")

    with st.form("auth_demo_form", clear_on_submit=True):
        email = st.text_input("Email")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        col_a, col_b = st.columns(2)
        with col_a:
            login = st.form_submit_button("–í–æ–π—Ç–∏ (–¥–µ–º–æ)")
        with col_b:
            register = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–¥–µ–º–æ)")
        if login or register:
            if email.strip():
                st.session_state["user"] = {"provider": "password", "email": email.strip()}
                st.success("–ì–æ—Ç–æ–≤–æ. –≠—Ç–æ –¥–µ–º–æ-–≤—Ö–æ–¥ –±–µ–∑ –±—ç–∫–∞.")
            else:
                st.error("–£–∫–∞–∂–∏ email.")

    with st.expander("–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å? (–¥–µ–º–æ)"):
        rp_email = st.text_input("Email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", key="rp_email")
        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É (–¥–µ–º–æ)"):
            if rp_email.strip():
                st.info("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–¥–µ–º–æ).")
            else:
                st.error("–£–∫–∞–∂–∏ email.")

    if st.session_state["user"]:
        st.caption(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: **{st.session_state['user']['email']}**")
        if st.button("–í—ã–π—Ç–∏"):
            st.session_state["user"] = None
            st.success("–í—ã –≤—ã—à–ª–∏ (–¥–µ–º–æ).")
            st.rerun()

# ==============================
# Main UI
# ==============================
st.title("üß† AI SQL Advisor")
st.caption("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SQL –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞. –¢–æ–ª—å–∫–æ SELECT. –ë–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

if not SUPABASE_ANON_KEY:
    st.warning("‚ö†Ô∏è –í —Å–µ–∫—Ä–µ—Ç–µ Streamlit –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç SUPABASE_ANON_KEY. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Settings ‚Üí Secrets.")

tab_scan, tab_saved = st.tabs(["üîé –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å/–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", "üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –±–∞–∑—ã"])

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî TAB 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ + –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
with tab_scan:
    with st.form("conn_form", clear_on_submit=False):
        db_url = st.text_input(
            "–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (Postgres, read-only)",
            placeholder="postgresql://user:pass@host:5432/dbname?sslmode=require",
        )
        col1, col2 = st.columns([1,1])
        with col1:
            schema_name = st.text_input("–°—Ö–µ–º–∞", value="public")
        with col2:
            dialect = st.selectbox("–î–∏–∞–ª–µ–∫—Ç (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ Postgres)", options=["postgres"], index=0)

        submitted = st.form_submit_button("üîé –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ö–µ–º—É")
        if submitted:
            err = _validate_url(db_url)
            if err:
                _err_box("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π db_url", err)
            else:
                with st.spinner("–ß–∏—Ç–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î‚Ä¶"):
                    try:
                        r = _post_json("fetch_schema", {"db_url": db_url, "schema": schema_name})

                        # –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ
                        try:
                            data = r.json()
                        except Exception:
                            data = {}

                        # === Friendly handling for catalog-only gate ===
                        if r.status_code == 403 and isinstance(data, dict) and data.get("code") == "ROLE_NOT_CATALOG_ONLY":
                            st.session_state["catalog_gate"] = True
                            st.rerun()
                        # === /Friendly handling ===

                        if r.status_code in (401,403):
                            _err_box("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ (401/403).", r.text[:2000])
                        elif r.status_code >= 500:
                            _err_box("–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π (5xx).", r.text[:2000])
                        else:
                            if not isinstance(data, dict) or "tables" not in data:
                                _err_box("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç /fetch_schema.", json.dumps(data, ensure_ascii=False, indent=2))
                            else:
                                st.session_state["schema_json"] = data
                                st.session_state["dialect"] = data.get("dialect", dialect) or dialect
                                st.success("–°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
                    except Exception as e:
                        _err_box("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ /fetch_schema.", str(e))

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É, –µ—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª catalog_gate (–≤–Ω–µ —Å–ø–∏–Ω–Ω–µ—Ä–∞)
    if st.session_state.get("catalog_gate"):
        st.error(
            "üîí –ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **–∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º**.\n\n"
            "–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Ç–æ–ª—å–∫–æ **catalog-only** —Ä–æ–ª–∏ (–±–µ–∑ `SELECT` –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã).\n\n"
            "–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
            "‚Ä¢ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–≤–æ–µ–π –ë–î –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–∞–≤ `SELECT`;\n"
            "‚Ä¢ –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä–µ–∂–∏–º **Offline JSON Schema** (–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º—ã –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î ‚Äî —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º).\n"
        )
        st.session_state["catalog_gate"] = False

    # ‚Äî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL
    schema_json = st.session_state.get("schema_json")
    st.markdown("---")
    st.subheader("–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–¥–∞—á—É")
    nl = st.text_area("–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ü–æ–∫–∞–∂–∏ –∏–º–µ–Ω–∞ –∏ email –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å–¥–µ–ª–∞–≤—à–∏—Ö –∑–∞–∫–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π¬ª", height=90)
    c1, c2, c3 = st.columns([1, 1, 1])

    with c1:
        gen = st.button("ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL", use_container_width=True)
    with c2:
        clear = st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True)
    with c3:
        reset_usage = st.button("üîÑ –û–±–Ω—É–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤", use_container_width=True)

    if clear:
        st.session_state.pop("generated_sql", None)
        st.session_state.pop("usage", None)
        st.toast("–û—á–∏—â–µ–Ω–æ.", icon="‚úÖ")

    if reset_usage:
        st.session_state.pop("usage", None)
        st.toast("–°—á—ë—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤ –æ–±–Ω—É–ª—ë–Ω.", icon="‚úÖ")

    if gen:
        if not schema_json:
            _err_box("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ö–µ–º—É.", "–ù–∞–∂–º–∏ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ö–µ–º—É¬ª –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω–∞ –ø–æ–¥—Ç—è–Ω—É–ª–∞—Å—å.")
        elif not nl.strip():
            _err_box("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.", "–ó–∞–ø–æ–ª–Ω–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –∑–∞–¥–∞—á–µ–π.")
        else:
            payload = {
                "nl": nl.strip(),
                "schema": schema_json,
                "dialect": (st.session_state.get("dialect") or "postgres"),
            }
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL‚Ä¶"):
                try:
                    r = _post_json("generate_sql", payload)
                    data = {}
                    try:
                        data = r.json()
                    except Exception:
                        pass

                    if r.status_code >= 500:
                        _err_box("–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π (5xx).", json.dumps(data, ensure_ascii=False, indent=2))
                    else:
                        if isinstance(data, dict) and data.get("blocked"):
                            st.warning("üö´ –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–∏—Ç–∏–∫–æ–π/–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.")
                            st.caption(str(data.get("reason", "")))
                            st.session_state["generated_sql"] = None
                        else:
                            st.session_state["generated_sql"] = (data.get("sql") if isinstance(data, dict) else None)

                        # usage –ø–æ–¥—Å—á—ë—Ç –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
                        usage = (data.get("usage") if isinstance(data, dict) else {}) or {}
                        pt = int(usage.get("prompt_tokens") or 0)
                        ct = int(usage.get("completion_tokens") or 0)
                        tt = int(usage.get("total_tokens") or (pt + ct))
                        st.session_state["usage"] = {
                            "prompt_tokens": pt,
                            "completion_tokens": ct,
                            "total_tokens": tt,
                        }
                except Exception as e:
                    _err_box("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ /generate_sql.", str(e))

    # —á–µ–∫–±–æ–∫—Å ¬´–ü–æ—è—Å–Ω–∏—Ç—å SQL¬ª
    sql_text = st.session_state.get("generated_sql")
    explain = st.checkbox("–ü–æ—è—Å–Ω–∏—Ç—å SQL (–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)", value=False)

    if sql_text:
        final_sql = _annotate_sql(sql_text) if explain else sql_text
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")
        st.code(final_sql, language="sql")
        copy_to_clipboard("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å SQL", final_sql, key=f"copybtn-{int(time.time())}")

    # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ë–õ–û–ö –°–¢–û–ò–ú–û–°–¢–ò / USAGE (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
usage = st.session_state.get("usage") or {}

# –∫–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ "–æ–¥–æ–º–µ—Ç—Ä–∞"
reset_odometer = st.button("üßÆ –û–±–Ω—É–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤", use_container_width=True)

# –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ‚Äî —á–∏—Å—Ç–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if reset_odometer:
    st.components.v1.html("""
        <script>
          localStorage.removeItem('ai_sql_total_usd');
          localStorage.removeItem('ai_sql_total_tokens');
        </script>
    """, height=0)
    st.toast("–°—á—ë—Ç—á–∏–∫ –æ–±–Ω—É–ª—ë–Ω.", icon="‚úÖ")

# –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ –∑–∞ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
if (usage.get("prompt_tokens") is not None) or (usage.get("completion_tokens") is not None):
    pt = int(usage.get("prompt_tokens") or 0)
    ct = int(usage.get("completion_tokens") or 0)
    total_now = int(usage.get("total_tokens") or (pt + ct))
    # —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
    cost_now = 0.0
    if OPENAI_IN_PRICE > 0 or OPENAI_OUT_PRICE > 0:
        cost_now = (pt/1000.0)*OPENAI_IN_PRICE + (ct/1000.0)*OPENAI_OUT_PRICE

    # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥
    st.info(f"–¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å ‚Üí —Ç–æ–∫–µ–Ω—ã: prompt={pt}, completion={ct}, total={total_now} ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost_now:.2f}")

    # –ø—Ä–∏–±–∞–≤–ª—è–µ–º –∫ "–æ–¥–æ–º–µ—Ç—Ä—É" –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    st.components.v1.html(f"""
        <script>
          const deltaUsd = {cost_now:.6f};
          const deltaTok = {total_now};

          const K_USD = 'ai_sql_total_usd';
          const K_TOK = 'ai_sql_total_tokens';

          let usd = parseFloat(localStorage.getItem(K_USD) || '0');
          let tok = parseInt(localStorage.getItem(K_TOK) || '0');

          usd = (usd + deltaUsd);
          tok = (tok + deltaTok);

          localStorage.setItem(K_USD, usd.toFixed(6));
          localStorage.setItem(K_TOK, String(tok));
        </script>
    """, height=0)

# —Ä–∏—Å—É–µ–º "–æ–¥–æ–º–µ—Ç—Ä" (—Å—É–º–º–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ)
st.components.v1.html("""
  <div id="ai-sql-odometer" style="margin-top:6px;padding:10px;border:1px solid #374151;border-radius:10px;">
    <b>–í—Å–µ–≥–æ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è (–Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ):</b>
    <div id="ai-sql-odometer-line" style="margin-top:4px;">—á–∏—Ç–∞–µ–º‚Ä¶</div>
  </div>
  <script>
    const usd = parseFloat(localStorage.getItem('ai_sql_total_usd') || '0');
    const tok = parseInt(localStorage.getItem('ai_sql_total_tokens') || '0');
    const line = document.getElementById('ai-sql-odometer-line');
    if (line) {{
      line.textContent = `${{tok}} —Ç–æ–∫–µ–Ω–æ–≤ ‚Ä¢ $${{usd.toFixed(2)}}`;
    }}
  </script>
""", height=70)

# –µ—Å–ª–∏ —Ü–µ–Ω—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
if OPENAI_IN_PRICE == 0 and OPENAI_OUT_PRICE == 0:
    st.caption("‚ÑπÔ∏è –£–∫–∞–∂–∏ OPENAI_IN_PRICE –∏ OPENAI_OUT_PRICE –≤ Secrets, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ $.")
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî /–ë–õ–û–ö –°–¢–û–ò–ú–û–°–¢–ò ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî


    # –ø–æ–∫–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if schema_json:
        count = schema_json.get("countTables") or (len(schema_json.get("tables", {})) if isinstance(schema_json.get("tables"), dict) else None)
        _badge(f"–°—Ö–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ‚Ä¢ —Ç–∞–±–ª–∏—Ü: {count if count is not None else '?'}")
        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å JSON-—Å—Ö–µ–º—É"):
            st.code(json.dumps(schema_json, ensure_ascii=False, indent=2), language="json")

        with st.form("save_schema_form", clear_on_submit=True):
            save_name = st.text_input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ö–µ–º—É –ø–æ–¥ –∏–º–µ–Ω–µ–º", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: neon_demo")
            save_btn = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ö–µ–º—É")
            if save_btn:
                if not save_name.strip():
                    _err_box("–ò–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ", "–£–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è (–ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã/–Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ).")
                else:
                    try:
                        r = _post_json(
                            "schemas",
                            {"op": "save", "name": save_name.strip(), "schema": schema_json, "dialect": (st.session_state.get("dialect") or "postgres")}
                        )
                        if r.status_code >= 400:
                            _err_box("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ö–µ–º—É", r.text[:2000])
                        else:
                            st.success(f"–°—Ö–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ ¬´{save_name}¬ª.")
                    except Exception as e:
                        _err_box("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ö–µ–º—ã", str(e))

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî TAB 2: –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –±–∞–∑—ã ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
with tab_saved:
    st.caption("–°–ø–∏—Å–æ–∫ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö ¬´—Å–∫–∞–Ω–æ–≤¬ª —Å—Ö–µ–º (Storage bucket: schemas).")

    c_refresh, _ = st.columns([1, 3])
    with c_refresh:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", use_container_width=True):
            st.session_state.pop("schemas_list", None)

    # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ö–µ–º
    if "schemas_list" not in st.session_state:
        try:
            rr = _schemas_get()
            if rr.status_code >= 400:
                _err_box("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ö–µ–º", rr.text[:2000])
            else:
                st.session_state["schemas_list"] = rr.json().get("items", [])
        except Exception as e:
            _err_box("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞", str(e))

    items = st.session_state.get("schemas_list", []) or []
    names = ["‚Äî"] + [it.get("name") for it in items]

    selected = st.selectbox("–í—ã–±–µ—Ä–∏ —Å—Ö–µ–º—É", options=names, index=0)
    if selected and selected != "‚Äî":
        st.text_input("–ò–º—è —Å—Ö–µ–º—ã", value=selected, disabled=True)

        colA, colB, colC = st.columns([1, 1, 1])
        can_diff = "schema_json" in st.session_state
        can_update = "schema_json" in st.session_state

        do_diff = colA.button("‚öôÔ∏è Diff —Å —Ç–µ–∫—É—â–µ–π", use_container_width=True, disabled=not can_diff)
        do_update = colB.button("‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é", use_container_width=True, disabled=not can_update)
        do_delete = colC.button("üóë –£–¥–∞–ª–∏—Ç—å", use_container_width=True)

        if do_diff:
            try:
                payload = {"op": "diff", "name": selected, "new_schema": st.session_state["schema_json"]}
                r = _schemas_post(payload)
                data = r.json()
                if r.status_code >= 400:
                    _err_box("Diff –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è", json.dumps(data, ensure_ascii=False, indent=2))
                else:
                    diff = data.get("diff") or {}
                    with st.expander("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (diff)", expanded=True):
                        st.code(json.dumps(diff, ensure_ascii=False, indent=2), language="json")
                    st.toast("Diff –≥–æ—Ç–æ–≤.", icon="‚úÖ")
            except Exception as e:
                _err_box("–û—à–∏–±–∫–∞ diff", str(e))

        if do_update:
            try:
                payload = {"op": "update", "name": selected, "new_schema": st.session_state["schema_json"]}
                r = _schemas_post(payload)
                data = r.json()
                if r.status_code >= 400:
                    _err_box("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É", json.dumps(data, ensure_ascii=False, indent=2))
                else:
                    if data.get("updated"):
                        st.success("–°—Ö–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
                    else:
                        st.info(data.get("reason", "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."))
                    st.session_state.pop("schemas_list", None)
            except Exception as e:
                _err_box("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", str(e))

        if do_delete:
            try:
                r = _schemas_post({"op": "delete", "name": selected})
                data = r.json()
                if r.status_code >= 400:
                    _err_box("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ö–µ–º—É", json.dumps(data, ensure_ascii=False, indent=2))
                else:
                    st.success(f"–£–¥–∞–ª–µ–Ω–æ: {selected}")
                    st.session_state.pop("schemas_list", None)
            except Exception as e:
                _err_box("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", str(e))

    st.markdown("---")
    st.caption("–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É, –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—É—é –≤–æ –≤–∫–ª–∞–¥–∫–µ ¬´–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å/–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ–¥ —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º ‚Äî –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç upsert.")
