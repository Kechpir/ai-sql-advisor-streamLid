# app.py ‚Äî Streamlit UI –¥–ª—è AI SQL Advisor
# –ë–µ—Ä—ë—Ç SUPABASE_URL –∏ SUPABASE_ANON_KEY –∏–∑ Streamlit Secrets.
# (–î–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ Cloud: Manage app ‚Üí Settings ‚Üí Secrets)

import json
import requests
import streamlit as st

st.set_page_config(page_title="AI SQL Advisor", page_icon="üß†", layout="centered")
st.title("üß† AI SQL Advisor")
st.caption("–ü–æ–¥–∫–ª—é—á–∞–π –±–∞–∑—É ‚Üí –ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å ‚Üí –ø–æ–ª—É—á–∞–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π SQL")

# === –°–µ–∫—Ä–µ—Ç—ã (–±–µ–∑ –Ω–∏—Ö –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–µ–¥–µ—Ç) ===
try:
    SUPABASE_URL = st.secrets["SUPABASE_URL"].rstrip("/")
    SUPABASE_ANON = st.secrets["SUPABASE_ANON_KEY"]
except Exception:
    st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–µ–∫—Ä–µ—Ç—ã SUPABASE_URL / SUPABASE_ANON_KEY. "
             "–ó–∞–¥–∞–π –∏—Ö –≤ Streamlit Cloud: Manage app ‚Üí Settings ‚Üí Secrets.")
    st.stop()

FETCH_SCHEMA_URL = f"{SUPABASE_URL}/functions/v1/fetch_schema"
GENERATE_SQL_URL = f"{SUPABASE_URL}/functions/v1/generate_sql"
HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {SUPABASE_ANON}",
}

st.divider()
st.subheader("1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (read-only)")

with st.form("connect_form", clear_on_submit=False):
    col1, col2 = st.columns(2)
    with col1:
        host = st.text_input("Host", value="ep-weathered-scene-ag47iood-pooler.c-2.eu-central-1.aws.neon.tech")
        dbname = st.text_input("Database", value="neondb")
        user = st.text_input("User", value="neondb_owner")
    with col2:
        port = st.text_input("Port", value="5432")
        password = st.text_input("Password", type="password")
        schema_name = st.text_input("Schema", value="public")

    submitted = st.form_submit_button("üì° –°—á–∏—Ç–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É")

if submitted:
    db_url = f"postgresql://{user}:{password}@{host}:{port}/{dbname}?sslmode=require"
    st.info("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∏ —á–∏—Ç–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É‚Ä¶")
    try:
        res = requests.post(FETCH_SCHEMA_URL, headers=HEADERS,
                            json={"db_url": db_url, "schema": schema_name}, timeout=30)
        if res.status_code == 200:
            schema = res.json()
            st.session_state["schema"] = schema
            st.success(f"‚úÖ –°—Ö–µ–º–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞. –¢–∞–±–ª–∏—Ü: {schema.get('countTables', 0)}")
            with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å JSON-—Å—Ö–µ–º—É"):
                st.json(schema)
        else:
            st.error(f"–û—à–∏–±–∫–∞ {res.status_code}: {res.text}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

st.divider()
st.subheader("2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞")

nl_query = st.text_area("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ",
                        value="–ü–æ–∫–∞–∂–∏ –∏–º–µ–Ω–∞ –∏ email –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å–¥–µ–ª–∞–≤—à–∏—Ö –∑–∞–∫–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
                        height=120)

if st.button("üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL"):
    schema = st.session_state.get("schema")
    if not schema:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏ –±–∞–∑—É –∏ —Å—á–∏—Ç–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É (—à–∞–≥ 1).")
    else:
        st.info("–ì–µ–Ω–µ—Ä–∏—Ä—É—é SQL‚Ä¶")
        try:
            res = requests.post(GENERATE_SQL_URL, headers=HEADERS,
                                json={"nl": nl_query, "schema": schema}, timeout=60)
            data = res.json()
            if res.status_code != 200:
                st.error(f"–û—à–∏–±–∫–∞ {res.status_code}: {data}")
            elif data.get("blocked"):
                st.error(f"‚ùå –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä–æ–º: {data.get('reason')}")
            else:
                sql = data.get("sql", "")
                st.code(sql, language="sql")
                st.success("‚úÖ –ì–æ—Ç–æ–≤–æ! –ö–æ–ø–∏—Ä—É–π –≤ DBeaver.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

st.caption("¬© 2025 Kechpir ‚Äî AI SQL Advisor ‚Ä¢ Supabase + OpenAI ‚Ä¢ read-only & safe")
