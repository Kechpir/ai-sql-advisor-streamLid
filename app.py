import streamlit as st
import requests
import json

st.set_page_config(page_title="AI SQL Advisor", page_icon="üß†", layout="centered")

st.title("üß† AI SQL Advisor")
st.caption("–ü–æ–¥–∫–ª—é—á–∞–π –±–∞–∑—É ‚Üí –ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å ‚Üí –ø–æ–ª—É—á–∞–π SQL")

st.divider()
st.subheader("1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

with st.form("connect_form"):
    host = st.text_input("Host", "ep-weathered-scene-ag47iood-pooler.c-2.eu-central-1.aws.neon.tech")
    port = st.text_input("Port", "5432")
    dbname = st.text_input("Database", "neondb")
    user = st.text_input("User", "neondb_owner")
    password = st.text_input("Password", type="password")
    submitted = st.form_submit_button("üì° –°—á–∏—Ç–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É")

if submitted:
    db_url = f"postgresql://{user}:{password}@{host}:{port}/{dbname}?sslmode=require"
    st.write("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ...")
    try:
        res = requests.post(
            "https://zpppzzwaoplfeoiynkam.supabase.co/functions/v1/fetch_schema",
            headers={
                "Content-Type": "application/json",
                "Authorization": "Bearer eyJhbGciOi..."  # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π anon public key
            },
            json={"db_url": db_url},
            timeout=30,
        )
        if res.status_code == 200:
            schema = res.json()
            st.success(f"‚úÖ –°—á–∏—Ç–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {schema.get('countTables', '‚Äî')}")
            st.json(schema)
            st.session_state["schema"] = schema
        else:
            st.error(f"–û—à–∏–±–∫–∞ {res.status_code}: {res.text}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

st.divider()
st.subheader("2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞")

nl_query = st.text_area("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ", "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å–¥–µ–ª–∞–≤—à–∏—Ö –∑–∞–∫–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é")

if st.button("üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL"):
    schema = st.session_state.get("schema")
    if not schema:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏ –±–∞–∑—É –∏ —Å—á–∏—Ç–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É üëÜ")
    else:
        st.write("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞...")
        try:
            res = requests.post(
                "https://zpppzzwaoplfeoiynkam.supabase.co/functions/v1/generate_sql",
                headers={
                    "Content-Type": "application/json",
                    "Authorization": "Bearer eyJhbGciOi..."  # —Å—é–¥–∞ —Ç–æ–∂–µ —Ç–≤–æ–π anon key
                },
                json={"nl": nl_query, "schema": schema},
                timeout=60,
            )
            data = res.json()
            if data.get("blocked"):
                st.error(f"‚ùå –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {data.get('reason')}")
            else:
                st.code(data.get("sql", ""), language="sql")
                st.success("‚úÖ SQL –≥–æ—Ç–æ–≤! –ú–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ DBeaver")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

st.caption("¬© 2025 Kechpir ‚Äî AI SQL Advisor ‚Ä¢ powered by Supabase + OpenAI")
