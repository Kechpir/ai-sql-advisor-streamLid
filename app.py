# -*- coding: utf-8 -*-
import json
import time
import requests
import streamlit as st

st.set_page_config(page_title="AI SQL Advisor", page_icon="üß†", layout="centered")

# === Secrets / Config ===
SUPABASE_URL = st.secrets.get("SUPABASE_URL", "https://zpppzzwaoplfeoiynkam.supabase.co")
SUPABASE_ANON_KEY = st.secrets.get("SUPABASE_ANON_KEY", "")
FUNC_BASE = f"{SUPABASE_URL}/functions/v1"

OPENAI_IN_PRICE = float(st.secrets.get("OPENAI_IN_PRICE", 0))
OPENAI_OUT_PRICE = float(st.secrets.get("OPENAI_OUT_PRICE", 0))

HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {SUPABASE_ANON_KEY}" if SUPABASE_ANON_KEY else "",
}


def _err_box(msg: str, details: str | None = None):
    st.error(msg)
    if details:
        with st.expander("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ"):
            st.code(details, language="text")


def _post_json(path: str, payload: dict, timeout=40) -> requests.Response:
    url = f"{FUNC_BASE}/{path.lstrip('/')}"
    return requests.post(url, headers=HEADERS, data=json.dumps(payload), timeout=timeout)


def _get(path: str, timeout=40) -> requests.Response:
    url = f"{FUNC_BASE}/{path.lstrip('/')}"
    return requests.get(url, headers=HEADERS, timeout=timeout)


def _validate_url(db_url: str) -> str | None:
    if not db_url:
        return "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (db_url)."
    if not db_url.startswith(("postgresql://", "postgres://")):
        return "–°–µ–π—á–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Postgres. URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å postgresql:// –∏–ª–∏ postgres://"
    if "@" not in db_url or ":" not in db_url:
        return "–ü–æ—Ö–æ–∂–µ, –≤ URL –Ω–µ—Ç –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è –∏–ª–∏ —Ö–æ—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç."
    if "sslmode=" not in db_url:
        return "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å ?sslmode=require –∫ —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
    return None


def _badge(text: str):
    st.markdown(
        f"<span style='background:#10b98120;color:#065f46;padding:4px 10px;border-radius:999px;font-size:12px;border:1px solid #10b98150;'>{text}</span>",
        unsafe_allow_html=True,
    )


def copy_to_clipboard(label: str, text_to_copy: str, key: str):
    st.components.v1.html(f"""
        <div><button id="{key}" style="padding:6px 10px;border-radius:8px;border:1px solid #e5e7eb;cursor:pointer;">
            {label}
        </button></div>
        <script>
            const btn = document.getElementById("{key}");
            if (btn) {{
                btn.addEventListener("click", async () => {{
                    try {{
                        await navigator.clipboard.writeText({json.dumps(text_to_copy)});
                        btn.innerText = "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ‚úì";
                        setTimeout(() => btn.innerText = {json.dumps(label)}, 1500);
                    }} catch (e) {{
                        btn.innerText = "–ù–µ –≤—ã—à–ª–æ :(";
                        setTimeout(() => btn.innerText = {json.dumps(label)}, 1500);
                    }}
                }});
            }}
        </script>
    """, height=50)


def _annotate_sql(sql: str) -> str:
    notes = []
    up = sql.upper()
    if "SELECT" in up: notes.append("-- SELECT: –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤—ã–≤–æ–¥–∏–º")
    if "FROM" in up: notes.append("-- FROM: –∏–∑ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ")
    if "JOIN" in up: notes.append("-- JOIN: –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã (LEFT JOIN ‚Äî –±–µ—Ä—ë–º –≤—Å–µ—Ö —Å–ª–µ–≤–∞)")
    if "WHERE" in up: notes.append("-- WHERE: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –ø–æ —É—Å–ª–æ–≤–∏—é")
    if "GROUP BY" in up: notes.append("-- GROUP BY: –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏")
    if "HAVING" in up: notes.append("-- HAVING: —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞–≥—Ä–µ–≥–∞—Ç–∞–º –ø–æ—Å–ª–µ GROUP BY")
    if "ORDER BY" in up: notes.append("-- ORDER BY: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    if "COALESCE(" in up: notes.append("-- COALESCE: –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ NULL")
    if "EXTRACT(" in up: notes.append("-- EXTRACT: –¥–æ—Å—Ç–∞—ë—Ç —á–∞—Å—Ç—å –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ (YEAR, MONTH –∏ —Ç.–¥.)")
    if "COUNT(" in up: notes.append("-- COUNT: COUNT(*) —Å—á–∏—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏; COUNT(col) –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç NULL")
    header = "/* –ö—Ä–∞—Ç–∫–∏–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è –∫ –∑–∞–ø—Ä–æ—Å—É:\n" + "\n".join(notes) + "\n*/\n" if notes else ""
    return header + sql


st.title("üß† AI SQL Advisor")
st.caption("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SQL –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞. –¢–æ–ª—å–∫–æ SELECT. –ë–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

if not SUPABASE_ANON_KEY:
    st.warning("‚ö†Ô∏è –í —Å–µ–∫—Ä–µ—Ç–µ Streamlit –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç SUPABASE_ANON_KEY. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Settings ‚Üí Secrets.")

tab_scan, tab_saved = st.tabs(["üîé –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å/–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", "üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –±–∞–∑—ã"])

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî TAB 1 ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
with tab_scan:
    with st.form("conn_form", clear_on_submit=False):
        db_url = st.text_input("–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (Postgres, read-only)", placeholder="postgresql://user:pass@host:5432/dbname?sslmode=require")
        col1, col2 = st.columns([1,1])
        with col1:
            schema_name = st.text_input("–°—Ö–µ–º–∞", value="public")
        with col2:
            dialect = st.selectbox("–î–∏–∞–ª–µ–∫—Ç (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ Postgres)", options=["postgres"], index=0)

        submitted = st.form_submit_button("üîé –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ö–µ–º—É")
        if submitted:
            err = _validate_url(db_url)
            if err:
                _err_box("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π db_url", err)
            else:
                with st.spinner("–ß–∏—Ç–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î‚Ä¶"):
                    try:
                        r = _post_json("fetch_schema", {"db_url": db_url, "schema": schema_name})
                        try:
                            data = r.json()
                        except Exception:
                            data = {}

                        # === Friendly handling for catalog-only gate ===
                        if r.status_code == 403 and isinstance(data, dict) and data.get("code") == "ROLE_NOT_CATALOG_ONLY":
                            st.session_state["catalog_gate"] = True
                            st.rerun()
                        # === /Friendly handling ===

                        if r.status_code in (401,403):
                            _err_box("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ (401/403).", r.text[:2000])
                        elif r.status_code >= 500:
                            _err_box("–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π (5xx).", r.text[:2000])
                        else:
                            data = r.json()
                            if not isinstance(data, dict) or "tables" not in data:
                                _err_box("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç /fetch_schema.", json.dumps(data, ensure_ascii=False, indent=2))
                            else:
                                st.session_state["schema_json"] = data
                                st.session_state["dialect"] = data.get("dialect", dialect) or dialect
                                st.success("–°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
                    except Exception as e:
                        _err_box("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ /fetch_schema.", str(e))

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É, –µ—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª catalog_gate
    if st.session_state.get("catalog_gate"):
        st.error(
            "üîí –ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **–∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º**.\n\n"
            "–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Ç–æ–ª—å–∫–æ **catalog-only** —Ä–æ–ª–∏ (–±–µ–∑ `SELECT` –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã).\n\n"
            "–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
            "‚Ä¢ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–≤–æ–µ–π –ë–î –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–∞–≤ `SELECT`;\n"
            "‚Ä¢ –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä–µ–∂–∏–º **Offline JSON Schema** (–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º—ã –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î ‚Äî —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º).\n"
        )
        st.session_state["catalog_gate"] = False

    # –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ UI –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    schema_json = st.session_state.get("schema_json")
    if schema_json:
        count = schema_json.get("countTables") or (len(schema_json.get("tables", {})) if isinstance(schema_json.get("tables"), dict) else None)
        _badge(f"–°—Ö–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ‚Ä¢ —Ç–∞–±–ª–∏—Ü: {count if count is not None else '?'}")
        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å JSON-—Å—Ö–µ–º—É"):
            st.code(json.dumps(schema_json, ensure_ascii=False, indent=2), language="json")
